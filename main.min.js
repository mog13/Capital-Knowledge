module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

function buildSpeechletResponse(title, output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: "PlainText",
            text: output
        },
        card: {
            type: "Simple",
            title: title,
            content: output
        },
        reprompt: {
            outputSpeech: {
                type: "PlainText",
                text: repromptText
            }
        },
        shouldEndSession: shouldEndSession
    };
}

function buildSpeechletResponseWithoutCard(output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: "PlainText",
            text: output
        },
        reprompt: {
            outputSpeech: {
                type: "PlainText",
                text: repromptText
            }
        },
        shouldEndSession: shouldEndSession
    };
}

function buildResponse(sessionAttributes, speechletResponse) {
    return {
        version: "1.0",
        sessionAttributes: sessionAttributes,
        response: speechletResponse
    };
}

module.exports = {
    buildResponse,
    buildSpeechletResponse,
    buildSpeechletResponseWithoutCard
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

let gameController = __webpack_require__(4);
let responseHelper = __webpack_require__(0);
const capitalPairs = __webpack_require__(2).countries;

function generateQuestion(capitalPair) {
    return "What is the capital of " + capitalPair.country;
}

module.exports = function getWelcomeResponse(callback) {
        let speechOutput = "Lets play capital knowledge!",
        shouldEndSession = false,
        gameQuestions = gameController.populateGameQuestions(capitalPairs),
        currentQuestionIndex = 0,
        currentCapital = capitalPairs[gameQuestions[currentQuestionIndex]],
        spokenQuestion = generateQuestion(currentCapital),
        correctAnswer = currentCapital.capital;

    speechOutput += spokenQuestion;
    let sessionAttributes = {
        "speechOutput": spokenQuestion,
        "repromptText": spokenQuestion,
        "currentQuestionIndex": currentQuestionIndex,
        "correctAnswer": correctAnswer,
        "questions": gameQuestions,
        "score": 0,
    };
    callback(sessionAttributes,
        responseHelper.buildSpeechletResponse("Capital knowledge", speechOutput, spokenQuestion, shouldEndSession));
};




/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = {"countries":[{"country":"Afghanistan","capital":"Kabul"},{"country":"Albania","capital":"Tirana"},{"country":"Algeria","capital":"Algiers"},{"country":"American Samoa","capital":"Pago Pago"},{"country":"Andorra","capital":"Andorra la Vella"},{"country":"Angola","capital":"Luanda"},{"country":"Anguilla","capital":"The Valley"},{"country":"Antigua and Barbuda","capital":"St Johns"},{"country":"Argentina","capital":"Buenos Aires"},{"country":"Armenia","capital":"Yerevan"},{"country":"Aruba","capital":"Oranjestad"},{"country":"Australia","capital":"Canberra"},{"country":"Austria","capital":"Vienna"},{"country":"Azerbaijan","capital":"Baku"},{"country":"Bahamas","capital":"Nassau"},{"country":"Bahrain","capital":"Manama"},{"country":"Bangladesh","capital":"Dhaka"},{"country":"Barbados","capital":"Bridgetown"},{"country":"Belarus","capital":"Minsk"},{"country":"Belgium","capital":"Brussels"},{"country":"Belize","capital":"Belmopan"},{"country":"Benin","capital":"Porto Novo"},{"country":"Bermuda","capital":"Hamilton"},{"country":"Bhutan","capital":"Thimphu"},{"country":"Bolivia","capital":"Sucre"},{"country":"Bosnia and Herzegovina","capital":"Sarajevo"},{"country":"Botswana","capital":"Gaborone"},{"country":"Brazil","capital":"Brasilia"},{"country":"Brunei","capital":"Bandar Seri Begawan"},{"country":"Bulgaria","capital":"Sofia"},{"country":"Burundi","capital":"Bujumbura"},{"country":"Cambodia","capital":"Phnom Penh"},{"country":"Cameroon","capital":"Yaounde"},{"country":"Canada","capital":"Ottawa"},{"country":"Cape Verde","capital":"Praia"},{"country":"Cayman Islands","capital":"George Town"},{"country":"Central African Republic","capital":"Bangui"},{"country":"Chad","capital":"NDjamena"},{"country":"Chile","capital":"Santiago"},{"country":"China","capital":"Beijing"},{"country":"Christmas Island","capital":"Flying Fish Cove"},{"country":"Colombia","capital":"Bogota"},{"country":"Comoros","capital":"Moroni"},{"country":"Cook Islands","capital":"Avarua"},{"country":"Costa Rica","capital":"San Jose"},{"country":"Croatia","capital":"Zagreb"},{"country":"Cuba","capital":"Havana"},{"country":"Curacao","capital":"Willemstad"},{"country":"Cyprus","capital":"Nicosia"},{"country":"Czech Republic","capital":"Prague"},{"country":"Ivory coast","capital":"Yamoussoukro"},{"country":"Democratic Republic of the Congo","capital":"Kinshasa"},{"country":"Denmark","capital":"Copenhagen"},{"country":"Djibouti","capital":"Djibouti"},{"country":"Dominica","capital":"Roseau"},{"country":"Dominican Republic","capital":"Santo Domingo"},{"country":"East Timor","capital":"Dili"},{"country":"Easter Island","capital":"Hanga Roa"},{"country":"Ecuador","capital":"Quito"},{"country":"Egypt","capital":"Cairo"},{"country":"El Salvador","capital":"San Salvador"},{"country":"Equatorial Guinea","capital":"Malabo"},{"country":"Eritrea","capital":"Asmara"},{"country":"Estonia","capital":"Tallinn"},{"country":"Ethiopia","capital":"Addis Ababa"},{"country":"Federated States of Micronesia","capital":"Palikir"},{"country":"Fiji","capital":"Suva"},{"country":"Finland","capital":"Helsinki"},{"country":"France","capital":"Paris"},{"country":"French Guiana","capital":"Cayenne"},{"country":"French Polynesia","capital":"Papeete"},{"country":"Gabon","capital":"Libreville"},{"country":"Gambia","capital":"Banjul"},{"country":"Georgia","capital":"Tbilisi"},{"country":"Germany","capital":"Berlin"},{"country":"Ghana","capital":"Accra"},{"country":"Gibraltar","capital":"Gibraltar"},{"country":"Greece","capital":"Athens"},{"country":"Greenland","capital":"Nuuk"},{"country":"Grenada","capital":"Saint Georges"},{"country":"Guam","capital":"Hagatna"},{"country":"Guatemala","capital":"Guatemala City"},{"country":"Guinea","capital":"Conakry"},{"country":"Guinea-Bissau","capital":"Bissau"},{"country":"Guyana","capital":"Georgetown"},{"country":"Haiti","capital":"Port au Prince"},{"country":"Honduras","capital":"Tegucigalpa"},{"country":"Hungary","capital":"Budapest"},{"country":"Iceland","capital":"Reykjavik"},{"country":"India","capital":"New Delhi"},{"country":"Indonesia","capital":"Jakarta"},{"country":"Iran","capital":"Tehran"},{"country":"Iraq","capital":"Baghdad"},{"country":"Ireland","capital":"Dublin"},{"country":"Israel","capital":"Jerusalem"},{"country":"Italy","capital":"Rome"},{"country":"Jamaica","capital":"Kingston"},{"country":"Japan","capital":"Tokyo"},{"country":"Jordan","capital":"Amman"},{"country":"Kazakhstan","capital":"Astana"},{"country":"Kenya","capital":"Nairobi"},{"country":"Kiribati","capital":"Tarawa"},{"country":"Kosovo","capital":"Pristina"},{"country":"Kuwait","capital":"Kuwait City"},{"country":"Kyrgyzstan","capital":"Bishkek"},{"country":"Laos","capital":"Vientiane"},{"country":"Latvia","capital":"Riga"},{"country":"Lebanon","capital":"Beirut"},{"country":"Lesotho","capital":"Maseru"},{"country":"Liberia","capital":"Monrovia"},{"country":"Libya","capital":"Tripoli"},{"country":"Liechtenstein","capital":"Vaduz"},{"country":"Lithuania","capital":"Vilnius"},{"country":"Luxembourg","capital":"Luxembourg"},{"country":"Macedonia","capital":"Skopje"},{"country":"Madagascar","capital":"Antananarivo"},{"country":"Malawi","capital":"Lilongwe"},{"country":"Malaysia","capital":"Kuala Lumpur"},{"country":"Maldives","capital":"Male"},{"country":"Mali","capital":"Bamako"},{"country":"Malta","capital":"Valletta"},{"country":"Marshall Islands","capital":"Majuro"},{"country":"Mauritania","capital":"Nouakchott"},{"country":"Mauritius","capital":"Port Louis"},{"country":"Mexico","capital":"Mexico City"},{"country":"Moldova","capital":"Chisinau"},{"country":"Monaco","capital":"Monaco"},{"country":"Mongolia","capital":"Ulaanbaatar"},{"country":"Montenegro","capital":"Podgorica"},{"country":"Morocco","capital":"Rabat"},{"country":"Mozambique","capital":"Maputo"},{"country":"Myanmar","capital":"Naypyidaw"},{"country":"Namibia","capital":"Windhoek"},{"country":"Nauru","capital":"Yaren"},{"country":"Nepal","capital":"Kathmandu"},{"country":"Netherlands","capital":"Amsterdam"},{"country":"New Caledonia","capital":"Noumea"},{"country":"New Zealand","capital":"Wellington"},{"country":"Nicaragua","capital":"Managua"},{"country":"Nigeria","capital":"Abuja"},{"country":"Niue","capital":"Alofi"},{"country":"North Korea","capital":"Pyongyang"},{"country":"United Kingdom Northern Ireland","capital":"Belfast"},{"country":"Northern Mariana Islands","capital":"Saipan"},{"country":"Norway","capital":"Oslo"},{"country":"Oman","capital":"Muscat"},{"country":"Pakistan","capital":"Islamabad"},{"country":"Palau","capital":"Ngerulmud"},{"country":"Panama","capital":"Panama City"},{"country":"Papua New Guinea","capital":"Port Moresby"},{"country":"Paraguay","capital":"Asuncion"},{"country":"Peru","capital":"Lima"},{"country":"Philippines","capital":"Manila"},{"country":"Poland","capital":"Warsaw"},{"country":"Portugal","capital":"Lisbon"},{"country":"Puerto Rico","capital":"San Juan"},{"country":"Qatar","capital":"Doha"},{"country":"Taiwan","capital":"Taipei"},{"country":"Republic of the Congo","capital":"Brazzaville"},{"country":"Romania","capital":"Bucharest"},{"country":"Russia","capital":"Moscow"},{"country":"Rwanda","capital":"Kigali"},{"country":"Saint Barts","capital":"Gustavia"},{"country":"Saint Helena","capital":"Jamestown"},{"country":"Saint Kitts and Nevis","capital":"Basseterre"},{"country":"Saint Lucia","capital":"Castries"},{"country":"Saint Martin","capital":"Marigot"},{"country":"Saint Pierre and Miquelon","capital":"saint Pierre"},{"country":"Saint Vincent and the Grenadines","capital":"Kingstown"},{"country":"Samoa","capital":"Apia"},{"country":"San Marino","capital":"San Marino"},{"country":"Saudi Arabia","capital":"Riyadh"},{"country":"Scotland","capital":"Edinburgh"},{"country":"Senegal","capital":"Dakar"},{"country":"Serbia","capital":"Belgrade"},{"country":"Seychelles","capital":"Victoria"},{"country":"Sierra Leone","capital":"Freetown"},{"country":"Singapore","capital":"Singapore"},{"country":"Slovakia","capital":"Bratislava"},{"country":"Slovenia","capital":"Ljubljana"},{"country":"Solomon Islands","capital":"Honiara"},{"country":"Somalia","capital":"Mogadishu"},{"country":"Somaliland","capital":"Hargeisa"},{"country":"South Africa","capital":"Pretoria"},{"country":"South Korea","capital":"Seoul"},{"country":"South Sudan","capital":"Juba"},{"country":"Spain","capital":"Madrid"},{"country":"Sri Lanka","capital":"Sri Jayawardenapura Kotte"},{"country":"Sudan","capital":"Khartoum"},{"country":"Suriname","capital":"Paramaribo"},{"country":"Swaziland","capital":"Mbabane"},{"country":"Sweden","capital":"Stockholm"},{"country":"Switzerland","capital":"Bern"},{"country":"Syria","capital":"Damascus"},{"country":"Sao Tome and Principe","capital":"Sao Tome"},{"country":"Tajikistan","capital":"Dushanbe"},{"country":"Tanzania","capital":"Dodoma"},{"country":"Thailand","capital":"Bangkok"},{"country":"Togo","capital":"Lome"},{"country":"Tonga","capital":"Nukualofa"},{"country":"Trinidad and Tobago","capital":"Port of Spain"},{"country":"Tunisia","capital":"Tunis"},{"country":"Turkey","capital":"Ankara"},{"country":"Tuvalu","capital":"Funafuti"},{"country":"Uganda","capital":"Kampala"},{"country":"Ukraine","capital":"Kiev"},{"country":"United Arab Emirates","capital":"Abu Dhabi"},{"country":"The United Kingdom","capital":"London"},{"country":"The United States","capital":"Washington D.C."},{"country":"Uruguay","capital":"Montevideo"},{"country":"Uzbekistan","capital":"Tashkent"},{"country":"Vanuatu","capital":"Port Vila"},{"country":"Vatican City","capital":"Vatican City"},{"country":"Venezuela","capital":"Caracas"},{"country":"Vietnam","capital":"Hanoi"},{"country":"Wales","capital":"Cardiff"},{"country":"Western Sahara","capital":"El Aaiun"},{"country":"Yemen","capital":"Sana"},{"country":"Zambia","capital":"Lusaka"},{"country":"Zimbabwe","capital":"Harare"}]}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {


let responseHelper = __webpack_require__(0);

let welcomeResponse = __webpack_require__(1);
let intentHandler = __webpack_require__(5);


exports.handler = function(event, context) {
    try {

        if (event.request.type === "LaunchRequest") {
            welcomeResponse((sessionAttributes, speechletResponse) => {context.succeed(responseHelper.buildResponse(sessionAttributes, speechletResponse));});
        } else if (event.request.type === "IntentRequest") {
            intentHandler(event.request,
                event.session,
                function callback(sessionAttributes, speechletResponse) {
                    context.succeed(responseHelper.buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === "SessionEndedRequest") {
            context.succeed();
        }
    } catch (e) {
        context.fail("Exception: " + e);
    }
};

/***/ }),
/* 4 */
/***/ (function(module, exports) {


function populateGameQuestions(capitalPairs) {
    let currentIndex = capitalPairs.length,
        questionsList = [],
        temporaryValue, randomIndex;
    //make a new array i.e copy capital pairs into index list
    for (let i = 0; i < capitalPairs.length; i++) {
        questionsList.push(i);
    }
    // While there remain elements to shuffle...
    while (0 !== currentIndex) {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        // And swap it with the current element.
        temporaryValue = questionsList[currentIndex];
        questionsList[currentIndex] = questionsList[randomIndex];
        questionsList[randomIndex] = temporaryValue;
    }

    return questionsList;
}

module.exports = {populateGameQuestions};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

let welcomeResponse = __webpack_require__(1),
    finishResponse = __webpack_require__(6),
    repeatResponse = __webpack_require__(7),
    helpResponse = __webpack_require__(8),
    answerResponse = __webpack_require__(9);


module.exports = function onIntent(intentRequest, session, callback) {

    let intent = intentRequest.intent,
        intentName = intentRequest.intent.name;

    // handle yes/no intent after the user has been prompted
    if (session.attributes && session.attributes.userPromptedToContinue) {
        delete session.attributes.userPromptedToContinue;
        if ("AMAZON.NoIntent" === intentName) {
            finishResponse(intent, session, callback);
        } else if ("AMAZON.YesIntent" === intentName) {
            repeatResponse(intent, session, callback);
        }
    }
    else if (session.attributes && session.attributes.playAgain) {
        delete session.attributes.playAgain;
        if ("AMAZON.NoIntent" === intentName) {
            finishResponse(intent, session, callback);
        } else if ("AMAZON.YesIntent" === intentName) {
            welcomeResponse(callback);
        }
    }else {

        // dispatch custom intents to handlers here

        if(["AnswerIntent","DontKnowIntent", "AMAZON.YesIntent","AMAZON.NoIntent"].indexOf(intentName) >0){
            answerResponse(intent, session, callback);
        } else if ("AMAZON.StartOverIntent" === intentName) {
            welcomeResponse(callback);
        } else if ("AMAZON.RepeatIntent" === intentName) {
            repeatResponse(intent, session, callback);
        } else if ("AMAZON.HelpIntent" === intentName) {
            helpResponse(intent, session, callback);
        } else if ("AMAZON.StopIntent" === intentName) {
            finishResponse(intent, session, callback);
        } else if ("AMAZON.CancelIntent" === intentName) {
            finishResponse(intent, session, callback);
        }
    }
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

let responseHelper = __webpack_require__(0);

module.exports = function handleFinishSessionRequest(intent, session, callback) {
    callback(session.attributes, responseHelper.buildSpeechletResponseWithoutCard("Thanks for playing capital knowledge.", "", true));
};



/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

let responseHelper = __webpack_require__(0);
let welcomeResponse = __webpack_require__(1);

module.exports = function handleRepeatRequest(intent, session, callback) {
    // Repeat the previous speechOutput and repromptText from the session attributes if available
    // else start a new game session
    if (!session.attributes || !session.attributes.speechOutput) {
        welcomeResponse(callback);
    } else {
        callback(session.attributes,
            responseHelper.buildSpeechletResponseWithoutCard(session.attributes.speechOutput, session.attributes.repromptText, false));
    }
}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

let responseHelper = __webpack_require__(0);

module.exports = function handleGetHelpRequest(intent, session, callback) {
    // Set a flag to track that we're in the Help state.
    if (session.attributes) {
        session.attributes.userPromptedToContinue = true;
    } else {
        // In case user invokes and asks for help simultaneously.
        session.attributes = {
            userPromptedToContinue: true
        };
    }

    let speechOutput = "To start a new game at any time, say, start new game. " +
        "To repeat the last question, say, repeat. " +
        "Would you like to keep playing?",
        repromptText = "Would you like to keep playing?";
    let shouldEndSession = false;
    callback(session.attributes,
        responseHelper.buildSpeechletResponseWithoutCard(speechOutput, repromptText, shouldEndSession));
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

let responseHelper = __webpack_require__(0);
const capitalPairs = __webpack_require__(2).countries;

function generateQuestion(capitalPair) {
    return "What is the capital of " + capitalPair.country;
}

module.exports = function handleAnswerRequest(intent, session, callback) {
    let speechOutput = "";
    let sessionAttributes = {};
    let gameInProgress = session.attributes && session.attributes.questions;
    let userGaveUp = intent.name === "DontKnowIntent";

    if (!gameInProgress) {
        // If the user responded with an answer but there is no game in progress, ask the user
        // if they want to start a new game. Set a flag to track that we've prompted the user.
        sessionAttributes.userPromptedToContinue = true;
        speechOutput = "There is no game in progress. Do you want to start a new game? ";
        callback(sessionAttributes,
            responseHelper.buildSpeechletResponse("Capital Knowledge", speechOutput, speechOutput, false));
    } else {
        let gameQuestions = session.attributes.questions,
            correctAnswer = session.attributes.correctAnswer,
            currentScore = parseInt(session.attributes.score),
            currentQuestionIndex = parseInt(session.attributes.currentQuestionIndex),
            speechOutputAnalysis = "";

        //If they are correct
        if (intent.slots && intent.slots.Answer && intent.slots.Answer.value.toUpperCase() == correctAnswer.toUpperCase()) {
            currentScore++;
            speechOutputAnalysis = "correct. ";

            if (currentQuestionIndex == capitalPairs.length - 1) {
                speechOutput += speechOutputAnalysis + "You got every capital correct! congratulations and thanks for playing!";
                callback(session.attributes,
                    responseHelper.buildSpeechletResponse("Capital Knowledge", speechOutput, "", true));
            }

        } else {
            //if they are wrong
            speechOutputAnalysis += "Sorry the correct answer is " + correctAnswer + ". ";
            speechOutputAnalysis += "You scored "+ session.attributes.score + ". ";
            speechOutputAnalysis += "Would you like to play again?";
            session.attributes.playAgain = true;
            callback(session.attributes,
                responseHelper.buildSpeechletResponse("Capital Knowledge",speechOutputAnalysis, "", false));
        }

        currentQuestionIndex += 1;
        let spokenQuestion = generateQuestion(capitalPairs[gameQuestions[currentQuestionIndex]]);
        correctAnswer = capitalPairs[gameQuestions[currentQuestionIndex]].capital;
        let repromptText = spokenQuestion;

        speechOutput += speechOutputAnalysis + "Your score is " + currentScore.toString() + ". " + repromptText;

        sessionAttributes = {
            "speechOutput": repromptText,
            "repromptText": repromptText,
            "currentQuestionIndex": currentQuestionIndex,
            "correctAnswer": correctAnswer,
            "questions": gameQuestions,
            "score": currentScore,
        };
        callback(sessionAttributes,
            responseHelper.buildSpeechletResponse("Capital Knowledge", speechOutput, repromptText, false));

    }
}

/***/ })
/******/ ]);